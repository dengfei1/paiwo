// pages/run/run.js
var wxCharts = require('../../utils/wxcharts.js');
var app = new getApp();
var util = require('../../utils/util.js');
Page({
  /**
   * 页面的初始数据
   */
  data: {
    hideModal: true, //模态框的状态  true-隐藏  false-显示
    animationData: {}, //
    date: '',
    winHeight: "", //窗口高度
    currentData: 0,
    isHided: false,
    isHided1: false,
    isHided2: false,
    isHided3: false,
    power: ['开机', '关机'],
    set: ['加热', '保温'],
    index: 0,
    a: '223',
    inx: 0,
    time: ['12:01', '12:01', '12:01', '12:01', '12:01', '12:01', '12:01', '12:01', '12:01', '12:01', '12:01', '12:01', '12:01', '12:01', '12:01', '12:01', '12:01', '12:01'],
    time1: ['12:01', '12:01', '12:01', '12:01', '12:01', '12:01', '12:01', '12:01', '12:01', '12:01', '12:01', '12:01', '12:01', '12:01', '12:01', '12:01', '12:01', '12:01'],
    key: 0,
    key1: ['自动', '自动', '自动', '自动', '自动', '自动', '自动', '自动', '自动', '自动', '自动', '自动', '自动', '自动'],
    key2: [25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25],
    key3: [55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55],
    key4: 0,
    key5: 0,
    isHide: false,
    item: 0,
    onTime: [],
    tem: ["25", "26"],
    water: ["55", "56", '57'],
    mode: ["自动", "制冷", '制热', '供暖'],
    dataArr: '',
    addTime: [{
      mode: ["自动", "制冷", '制热', '供暖'],
      water: ["55", "56", '57'],
      tem: ["25", "26"],
      time: '12:01',
      time1: '12:01',
      icon: 'icon-yuandianzhong',

    }, ],
    uuid: '',
    num: 0,
    setName: '',
    // 设备选择
    deviceArr: [
      // {
      //   name: '12323443',
      //   address: '新港花园4栋302'
      // },
      // {
      //   name: '233243',
      //   address: '新港花园4栋304'
      // },
      // {
      //   name: '3231143',
      //   address: '新港花园4栋306'
      // },
      // {
      //   name: '3231143',
      //   address: '新港花园4栋306'
      // },
      // {
      //   name: '3231143',
      //   address: '新港花园4栋306'
      // }
    ],
  },
  // 设备切换
  deviceArr: function(e) {
    var that = this;
    var index = e.currentTarget.dataset.index;
    that.setData({
      num: index
    })
    console.log(index, 'index');
    var num = that.data.num;
    var deviceArr = that.data.deviceArr;
    that.setData({
      uuid: deviceArr[num][0]
    })
    that.setData({
      setName: deviceArr[num][1]
    })
    //console.log(num, 'num')
    var uuid = that.data.uuid;
   // console.log(num, uuid)
    wx.request({
      url: app.globalData.url + '/receptionMessage/findByImei?imei=' + uuid,
      data: '',
      header: app.globalData.header,
      method: 'POST',
      dataType: 'json',
      responseType: 'text',
      success: function(res) {
        console.log(res);
        //console.log(res.data.data);
        var dataArr = res.data.data
        // 运行状态赋值
        that.setData({
          dataArr: dataArr
        })
        console.log(that.data.dataArr,'that.data.dataArr')
        that.setData({
          isHide:false
        })
      },
      fail: function(res) {},
      complete: function(res) {},
    })
  },
  bindPickerChange(e) {
    console.log('picker发送选择改变，携带值为', e.detail.value)
    this.setData({
      index: e.detail.value
    })
  },
  // 表单提交事件
  formSubmit0: function(e) {
    console.log('form发生了submit事件，携带数据为：', e.detail.value)
  },
  formSubmit1: function(e) {
    console.log('form发生了submit事件，携带数据为：', e.detail.value)
  },
  formSubmit2: function(e) {
    console.log('form发生了submit事件，携带数据为：', e.detail.value)
  },
  formSubmit3: function(e) {
    console.log('form发生了submit事件，携带数据为：', e.detail.value)
  },
  formSubmit4: function(e) {
    console.log('form发生了submit事件，携带数据为：', e.detail.value)
  },
  formSubmit5(e) {
    console.log('form发生了submit事件，携带数据为5：', e.detail.value)
  },

  formTime(e) {
    console.log('form发生了submit事件，携带数据为：', e.detail.value)
  },
  formTime1(e) {
    console.log('form发生了submit事件，携带数据为：', e.detail.value)
  },

  switch2Change: function(e) {
    console.log('switch2 发生 change 事件，携带值为', e.detail.value)
  },
  // 水箱温度
  totalTem: function() {
    var canvas1 = new wxCharts({
      canvasId: 'canvas1',
      type: 'area',
      categories: ['12:00', '15:00', '18:00', '21:00', '00:00', '03:00', '06:00', '09:00'],
      series: [{
        name: '水箱温度',
        data: [38, 40, 65, 75, 65, 60, 52, 50],
        format: function(val) {
          return val.toFixed(2) + '℃';
        }
      }],
      yAxis: {
        format: function(val) {
          return val + '℃';
        }
      },
      width: 320,
      height: 200
    });
    var that = this;
    that.setData({
      isHided: true
    })
  },
  // 进水温度
  leaveTem: function() {
    var canvas2 = new wxCharts({
      canvasId: 'canvas2',
      type: 'area',
      categories: ['12:00', '15:00', '18:00', '21:00', '00:00', '03:00', '06:00', '09:00'],
      series: [{
        name: '总进水温度',
        data: [38, 40, 65, 75, 65, 60, 52, 50],
        format: function(val) {
          return val.toFixed(2) + '℃';
        }
      }],
      yAxis: {
        format: function(val) {
          return val + '℃';
        }
      },
      width: 320,
      height: 200
    });
    var that = this;
    that.setData({
      isHided1: true
    })
  },

  // 出水温度
  interTem: function() {
    var canvas3 = new wxCharts({
      canvasId: 'canvas3',
      type: 'area',
      categories: ['12:00', '15:00', '18:00', '21:00', '00:00', '03:00', '06:00', '09:00'],
      series: [{
        name: '总进水温度',
        data: [38, 40, 65, 75, 65, 60, 52, 50],
        format: function(val) {
          return val.toFixed(2) + '℃';
        }
      }],
      yAxis: {
        format: function(val) {
          return val + '℃';
        }
      },
      width: 320,
      height: 200
    });
    var that = this;
    that.setData({
      isHided2: true
    })
  },
  // 环境温度
  ambTem: function() {
    var canvas4 = new wxCharts({
      canvasId: 'canvas4',
      type: 'area',
      categories: ['12:00', '15:00', '18:00', '21:00', '00:00', '03:00', '06:00', '09:00'],
      series: [{
        name: '总进水温度',
        data: [38, 40, 65, 75, 65, 60, 52, 50],
        format: function(val) {
          return val.toFixed(2) + '℃';
        }
      }],
      yAxis: {
        format: function(val) {
          return val + '℃';
        }
      },
      width: 320,
      height: 200
    });
    var that = this;
    that.setData({
      isHided3: true
    })
  },
  // 添加定时
  addTime: function(e) {
    var index = e.currentTarget.dataset.index;
    var that = this;
    var onTime = that.data.addTime;
    let onTimeOne = [];
    onTimeOne.push(onTime[0]);
    onTime.push(onTimeOne[0]);
    if (onTime.length < 6) {
      that.setData({
        addTime: onTime,
        keys: onTimeOne.length
      })
    } else {
      wx.showToast({
        title: '最多定时5个阶段',
      })
    }
  },

  // 删除
  del: function(e) {
    var that = this;
    wx.showModal({
      title: '提示',
      content: '删除该阶段定时？',
      success: function(res) {
        if (res.confirm) {
          var addTime = that.data.addTime;
          var index = e.currentTarget.dataset.index;
          // console.log('index', index);
          addTime.splice(e.currentTarget.dataset.index, 1);
          that.setData({
            addTime: addTime
          })
        } else {
          console.log('用户点击取消')
        }
      }
    })
  },

  /**
   * 生命周期函数--监听页面加载
   */
  onLoad: function(options) {
    var that = this;
    // 获取当前时间
    var dated = util.formatDate(new Date());
    console.log(dated, 'formatDate')
    this.setData({
      date: dated
    });
    //  高度自适应
    wx.getSystemInfo({
      success: function(res) {
        var clientHeight = res.windowHeight,
          clientWidth = res.windowWidth,
          rpxR = 750 / clientWidth;
        var calc = clientHeight * rpxR;
        console.log(calc)
        that.setData({
          winHeight: calc
        });
      }
    });
    var userList = wx.getStorageSync('userList')
    //console.log('userList', userList)
    var id = userList.user.data.currentUser.id

    //console.log('userList.user.data.sessionId', userList.user.data.sessionId)
    app.globalData.header.Cookie = 'JSESSIONID=' + userList.user.data.sessionId;
    console.log('app.globalData.header.Cookie', app.globalData.header)
    
    // 默认为运行状态
    var uuid = that.data.uuid;
    console.log(uuid,'uuid')
    var setName = that.data.setName;
    wx.request({
      url: app.globalData.url + '/receptionMessage/findByImei?imei=' + uuid,
      data: '',
      header: app.globalData.header,
      method: 'POST',
      dataType: 'json',
      responseType: 'text',
      success: function(res) {
        console.log(res);
        console.log(res.data.data);
        var dataArr = res.data.data
        // 运行状态赋值
        that.setData({
          dataArr: dataArr
        })
        console.log(that.data.dataArr, 'that.data.dataArr')
        // that.setData({
        //   isHide: false
        // })
      },
      fail: function(res) {},
      complete: function(res) {},
    })
    // 设备查询
    wx.request({
      url: app.globalData.url + '/equipment/findByuserId?userId=' + id,
      data: '',
      header: app.globalData.header,
      method: 'POST',
      fail: function (res) {
        console.log('fail')
      },
      success: function (res) {
        that.setData({
          deviceArr: res.data.data
        })
        var deviceArr = that.data.deviceArr;
        //console.log(res.data.data[currentData][0])
        that.setData({
          uuid: deviceArr[0][0]
        })
        that.setData({
          setName: deviceArr[0][1]
        })
        console.log('deviceArr[0][1]', deviceArr[0][1])
        console.log('setName', that.data.setName)
        console.log('设备查询', res)
        console.log('success')
      },
      complete: function (res) { },
    })

  },
  //获取当前滑块的index
  bindchange: function(e) {
    const that = this;
    that.setData({
      currentData: e.detail.current
    })
  },
  //点击切换，滑块index赋值
  checkCurrent: function(e) {
    const that = this;
    if (that.data.currentData === e.target.dataset.current) {
      return false;
    } else {
      that.setData({
        currentData: e.target.dataset.current
      })
    }
    var currentData = that.data.currentData;
    // 运行状态
    if (currentData == 0) {

    }
    if (currentData == 1) {
      console.log(111)
    }
    // 系统定时
    if (currentData == 2) {
      console.log(222)
    }
  },
  // 开机选择
  bindPickerChange1(e) {
    console.log('picker发送选择改变，携带值为', e.detail.value)
    this.setData({
      index: e.detail.value
    })
  },
  // 运行选择
  bindPickerChange2(e) {
    console.log('picker发送选择改变，携带值为', e.detail.value)
    this.setData({
      key: e.detail.value
    })
  },
  //模式设置
  modeChange(e) {
    var that = this;
    // 最外层下标
    var ind = e.detail.value;
    // 模式下标
    var index = e.currentTarget.dataset.a;
    console.log(index, this.data.mode[ind]);
    var data = 'key1[' + index + ']';
    console.log(data);
    that.setData({
      [data]: this.data.mode[ind]
    })
    console.log(this.data.key1);
  },
  //温度设置
  temChange(e) {
    var that = this;
    var ind = e.detail.value;
    var index = e.currentTarget.dataset.b;
    var data = 'key2[' + index + ']';
    that.setData({
      [data]: this.data.tem[ind]
    })
  },
  //水位选择
  waterChange(e) {
    var that = this;
    var ind = e.detail.value;
    var index = e.currentTarget.dataset.c;
    var data = 'key3[' + index + ']';
    that.setData({
      [data]: this.data.water[ind]
    })
  },
  // 时间选择
  bindTimeChange(e) {
    var that = this;
    var ind = e.detail.value;
    console.log(e)
    var index = e.currentTarget.dataset.d;
    console.log(index, 'index')
    var data = 'time[' + index + ']';
    that.setData({
      [data]: ind
    })
  },
  bindTimeChange1(e) {
    var that = this;
    var ind = e.detail.value;
    console.log(e)
    var index = e.currentTarget.dataset.e;
    console.log(index, 'index')
    var data = 'time1[' + index + ']';
    that.setData({
      [data]: ind
    })
    // console.log('picker发送选择改变，携带值为', e.detail.value)
    // this.setData({
    //   time1: e.detail.value
    // })
  },
  bindPickerChange5(e) {
    console.log('picker发送选择改变，携带值为', e.detail.value)
    this.setData({
      key3: e.detail.value
    })
  },
  //温度选择时间
  bindDateChange: function(e) {
    console.log('picker发送选择改变，携带值为', e.detail.value)
    this.setData({
      date: e.detail.value
    })
  },
  // 查看更多设备
  more: function() {
    var that = this;
    that.setData({
      isHide: true
    })
  },
  back: function() {
    var that = this;
    that.setData({
      isHide: false
    })
    that.setData({
      isHided: false
    })
    that.setData({
      isHided1: false
    })
    that.setData({
      isHided2: false
    })
    that.setData({
      isHided3: false
    })
  },

  /**
   * 生命周期函数--监听页面初次渲染完成
   */
  onReady: function() {

  },

  /**
   * 生命周期函数--监听页面显示
   */
  onShow: function() {

  },

  /**
   * 生命周期函数--监听页面隐藏
   */
  onHide: function() {

  },

  /**
   * 生命周期函数--监听页面卸载
   */
  onUnload: function() {

  },

  /**
   * 页面相关事件处理函数--监听用户下拉动作
   */
  onPullDownRefresh: function() {

  },

  /**
   * 页面上拉触底事件的处理函数
   */
  onReachBottom: function() {

  },

  /**
   * 用户点击右上角分享
   */
  onShareAppMessage: function() {

  },
  // 显示遮罩层
  showModal: function() {
    var that = this;
    that.setData({
      hideModal: false
    })
    var animation = wx.createAnimation({
      duration: 600, //动画的持续时间 默认400ms   数值越大，动画越慢   数值越小，动画越快
      timingFunction: 'ease', //动画的效果 默认值是linear
    })
    this.animation = animation
    setTimeout(function() {
      that.fadeIn(); //调用显示动画
    }, 200)
  },

  // 隐藏遮罩层
  hideModal: function() {
    var that = this;
    var animation = wx.createAnimation({
      duration: 800, //动画的持续时间 默认400ms   数值越大，动画越慢   数值越小，动画越快
      timingFunction: 'ease', //动画的效果 默认值是linear
    })
    this.animation = animation
    that.fadeDown(); //调用隐藏动画   
    setTimeout(function() {
      that.setData({
        hideModal: true
      })
    }, 720) //先执行下滑动画，再隐藏模块
  },

  //动画集
  fadeIn: function() {
    this.animation.translateY(0).step()
    this.setData({
      animationData: this.animation.export() //动画实例的export方法导出动画数据传递给组件的animation属性
    })
  },
  fadeDown: function() {
    this.animation.translateY(300).step()
    this.setData({
      animationData: this.animation.export(),
    })
  },
})